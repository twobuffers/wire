import buildcfg.Deps
import buildcfg.Versions

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.vanniktech.maven.publish'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn',]
    }
}

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildTools
    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
    }
    buildTypes {
        release {
            consumerProguardFiles 'consumer-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = Versions.JAVA_VERSION_STR
        targetCompatibility = Versions.JAVA_VERSION_STR
    }
}

dependencies {
    implementation project(':wire-di-annotations-common')
    implementation project(':wire-coroutines')
    implementation project(':wire-utils')
    api project(':wire-initializer')

    implementation(Deps.OrgJetBrains.Kotlin.kotlinStdlib)
    implementation(Deps.OrgJetBrains.KotlinX.Coroutines.kotlinxCoroutinesCore)
    implementation(Deps.OrgJetBrains.KotlinX.Coroutines.kotlinxCoroutinesPlayServices)
    api(Deps.AndroidX.Annotation.annotation)
    api(Deps.ComGoogle.Dagger.dagger)
    api(Deps.ComGoogle.Dagger.daggerAndroid)
    kapt(Deps.ComGoogle.Dagger.daggerCompiler)
    kapt(Deps.ComGoogle.Dagger.daggerAndroidProcessor)
    api(Deps.ComGoogle.Firebase.firebaseAnalyticsKtx) // export: to enable analytics for push notifications
    api Deps.ComGoogle.Firebase.firebaseMessagingKtx // export: FirebaseMessaging, RemoteMessage
}
